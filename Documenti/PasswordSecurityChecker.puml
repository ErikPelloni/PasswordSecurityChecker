@startuml "PasswordSecurityChecker"
skinparam classAttributeIconSize 0
class PasswordSecurityChecker{
    - List<String> name
    - int[] birth
    - String info
    - char[] specials
    - String password
    - String[] commons
    - int tries
    - SimpleDateFormat dateFormat
    - PasswordSecurityChecker()
    - void getData(String[] args)
    - void checkEasy()
    - void checkFrequent()
    - void checkComplex()
    - void checkBrute()
    - void checkNameCombination(boolean nameFirst)
    - void tryPassword(List<String> elements)
    - void tryPassword(Strings s)
    - void tryAllPermutations(List<String> elements)
    - static void displayResult()
    - void displayHelp()
}

class utils.ParamHandler


@enduml

@startuml
skinparam classAttributeIconSize 0
class PasswordSecurityChecker{
    - {static} dateFormat : SimpleDateFormat
    - {static} specials : String[]
    - handler : ParamHandler
    - name : List<String>
    - birth : int[]
    - tries : int
    - start : long
    - info : String
    - bruteString : String
    - PasswordSecurityChecker()
    - displayHelp() : void
    - getData(args : String[]) : void
    - isBirthValid() : boolean
    - checkEasy(useSpecials : boolean) : void
    - checkEasy() : void
    - checkFrequent() : void
    - checkComplex() : void
    - checkInfo() : void
    - checkBrute() : void
    - checkNameCombination(fullBirthYear : boolean, last2Digits : boolean, useSpecials : boolean) : void
    - tryAllPermutations(elements : List<String>, useSpecials : boolean) : void
    - tryPassword(elements : List<String>, useSpecials : boolean) : void
    - tryPassword(elements : List<String>) : void
    - tryPassword(s : String) : void
    tryPassword(s : String, brute : boolean) : void
    - displayResult(isPasswordFound : boolean, brute : boolean) : void
    + {static} main(args : String[]) : void
}
package utils{
    class Property{
        - property : String
        + Property(property : String, value : String)
        + getProperty() : String
        + getValue() : String
    }
    class ParamHandler{
        - PREFIX : String
        - args : HashMap<String,Arg>
        - flags : HashMap<String,Flag>
        + ParamHandler(prefix : String)
        + ParamHandler()
        + parse(params : String) : void
        + getStatus() : String
        + isComplete() : boolean
        + {static} propertyOf(property : String, value : String) : Property
        + addArg(argName : String, mandatory : boolean, type : String, properties : Property) : void
        + addArg(argName : String, mandatory : boolean, type : String, def : String, properties : Property) : void
        + addFlag(flagName : String, properties : Property) : void
        + isNull(argName : String) : boolean
        + getArg(argName : String) : String
        + getFlag(flagName : String) : boolean
        + setArg(name : String, value : String) : boolean
        + setFlag(name : String, value : boolean) : boolean
        + help(cmd : String, description : String) : String
    }
    package types{
        class Arg{
            properties : Property[]
            - mandatory : boolean
            - value : String
            + Arg(mandatory : boolean, type : String, def : String, properties : Property)
            + Arg(mandatory : boolean, type : String, properties : Property)
            + getValue() : String
            + isNull() : boolean
            + isMandatory() : boolean
            + setValue(value : String) : void
            + getDefault() : String
            + getType() : String
            + getProperties() : Property[]
            + hasProperties() : boolean
        }
        class Flag{
            - properties : Property[]
            - value : boolean
            + Flag(properties : Property)
            + setValue(value : boolean) : void
            + getValue() : boolean
            + getProperties() : Property[]
            + hasProperties() : boolean
        }
    }
}
PasswordSecurityChecker o-- utils.ParamHandler : handler
@enduml